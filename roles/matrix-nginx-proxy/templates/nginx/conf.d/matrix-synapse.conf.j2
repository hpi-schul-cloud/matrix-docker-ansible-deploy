#jinja2: lstrip_blocks: "True"

{% macro cors_options_response() %}
if ($request_method = OPTIONS) {
					add_header 'Access-Control-Allow-Origin' '*';
					add_header 'Access-Control-Allow-Methods' 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
					add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization, Date';
					add_header 'Content-Type' 'text/plain charset=UTF-8';
					add_header 'Content-Length' 0;
					return 204;
				}
{% endmacro %}

{% set generic_workers = matrix_nginx_proxy_synapse_workers_list|selectattr('type', 'equalto', 'generic_worker')|list %}
{% set generic_workers_all = generic_workers|selectattr('route', 'equalto', 'all')|list %}
{% set generic_workers_login = generic_workers|selectattr('route', 'equalto', 'login')|list %}
{% set generic_workers_sync = generic_workers|selectattr('route', 'equalto', 'sync')|list %}
{% set generic_workers_syncInitial = generic_workers|selectattr('route', 'equalto', 'syncInitial')|list %}
{% set generic_workers_typing = generic_workers|selectattr('route', 'equalto', 'typing')|list %}
{% set media_repository_workers = matrix_nginx_proxy_synapse_workers_list|selectattr('type', 'equalto', 'media_repository')|list %}
{% set user_dir_workers = matrix_nginx_proxy_synapse_workers_list|selectattr('type', 'equalto', 'user_dir')|list %}
{% set frontend_proxy_workers = matrix_nginx_proxy_synapse_workers_list|selectattr('type', 'equalto', 'frontend_proxy')|list %}
{% if matrix_nginx_proxy_synapse_workers_enabled %}
	# "upstream" pools for workers

	{% if generic_workers_all %}
	upstream generic_worker_upstream {
		# configure the load balancing
		{% if matrix_nginx_proxy_synapse_generic_worker_routing %}
			{{ matrix_nginx_proxy_synapse_generic_worker_routing }}
		{% endif %}

		{% for worker in generic_workers_all %}
			{% if matrix_nginx_proxy_enabled %}
				server "matrix-synapse-worker-{{ worker.type | replace('_', '-') }}-{{ worker.instanceId }}:{{ worker.port }}"{% if worker.parameters is defined %} {{worker.parameters}}{% endif %};
			{% else %}
				server "127.0.0.1:{{ worker.port }}";
			{% endif %}
		{% endfor %}
	}
	{% endif %}

	{% if generic_workers_login %}
	upstream generic_worker_login_upstream {
		# configure the load balancing
		{% if matrix_nginx_proxy_synapse_generic_worker_routing %}
			{{ matrix_nginx_proxy_synapse_generic_worker_routing }}
		{% endif %}

		{% for worker in generic_workers_login %}
			{% if matrix_nginx_proxy_enabled %}
				server "matrix-synapse-worker-{{ worker.type | replace('_', '-') }}-{{ worker.instanceId }}:{{ worker.port }}"{% if worker.parameters is defined %} {{worker.parameters}}{% endif %};
			{% else %}
				server "127.0.0.1:{{ worker.port }}";
			{% endif %}
		{% endfor %}
	}
	{% endif %}

	{% if generic_workers_sync %}
	upstream generic_worker_sync_upstream {
		# configure the load balancing
		{% if matrix_nginx_proxy_synapse_generic_worker_routing %}
			{{ matrix_nginx_proxy_synapse_generic_worker_routing }}
		{% endif %}

		{% for worker in generic_workers_sync %}
			{% if matrix_nginx_proxy_enabled %}
				server "matrix-synapse-worker-{{ worker.type | replace('_', '-') }}-{{ worker.instanceId }}:{{ worker.port }}"{% if worker.parameters is defined %} {{worker.parameters}}{% endif %};
			{% else %}
				server "127.0.0.1:{{ worker.port }}";
			{% endif %}
		{% endfor %}
	}
	{% endif %}

	{% if generic_workers_syncInitial %}
	upstream generic_worker_syncInitial_upstream {
		# configure the load balancing
		{% if matrix_nginx_proxy_synapse_generic_worker_routing %}
			{{ matrix_nginx_proxy_synapse_generic_worker_routing }}
		{% endif %}

		{% for worker in generic_workers_syncInitial %}
			{% if matrix_nginx_proxy_enabled %}
				server "matrix-synapse-worker-{{ worker.type | replace('_', '-') }}-{{ worker.instanceId }}:{{ worker.port }}"{% if worker.parameters is defined %} {{worker.parameters}}{% endif %};
			{% else %}
				server "127.0.0.1:{{ worker.port }}";
			{% endif %}
		{% endfor %}
	}
	{% endif %}

	{% if generic_workers_typing %}
	upstream generic_worker_typing_upstream {
		{% for worker in generic_workers_typing %}
			{% if matrix_nginx_proxy_enabled %}
				server "matrix-synapse-worker-{{ worker.type | replace('_', '-') }}-{{ worker.instanceId }}:{{ worker.port }}"{% if worker.parameters is defined %} {{worker.parameters}}{% endif %};
			{% else %}
				server "127.0.0.1:{{ worker.port }}";
			{% endif %}
		{% endfor %}
	}
	{% endif %}

	{% if frontend_proxy_workers %}
	upstream frontend_proxy_upstream {
		{% for worker in frontend_proxy_workers %}
			{% if matrix_nginx_proxy_enabled %}
				server "matrix-synapse-worker-{{ worker.type | replace('_', '-') }}-{{ worker.instanceId }}:{{ worker.port }}";
			{% else %}
				server "127.0.0.1:{{ worker.port }}";
			{% endif %}
		{% endfor %}
	}
	{% endif %}

	{% if media_repository_workers %}
	upstream media_repository_upstream {
		{% for worker in media_repository_workers %}
			{% if matrix_nginx_proxy_enabled %}
				server "matrix-synapse-worker-{{ worker.type | replace('_', '-') }}-{{ worker.instanceId }}:{{ worker.port }}";
			{% else %}
				server "127.0.0.1:{{ worker.port }}";
			{% endif %}
		{% endfor %}
	}
	{% endif %}

	{% if user_dir_workers %}
	upstream user_dir_upstream {
		{% for worker in user_dir_workers %}
			{% if matrix_nginx_proxy_enabled %}
				server "matrix-synapse-worker-{{ worker.type | replace('_', '-') }}-{{ worker.instanceId }}:{{ worker.port }}";
			{% else %}
				server "127.0.0.1:{{ worker.port }}";
			{% endif %}
		{% endfor %}
	}
	{% endif %}
{% endif %}

server {
	listen 12080;
	server_name {{ matrix_nginx_proxy_proxy_synapse_hostname }};

	server_tokens off;
	root /dev/null;

	gzip on;
	gzip_types text/plain application/json;

	add_header 'Access-Control-Max-Age' 1728000;

	{% if matrix_nginx_proxy_synapse_workers_enabled %}
		{# Workers redirects BEGIN #}

		{% if generic_workers_login %}
			location ~ ^/_matrix/client/(api/v1|r0|unstable)/login$ {
				{{ cors_options_response() }}
				proxy_pass http://generic_worker_login_upstream$request_uri;
				proxy_set_header Host $host;
			}
		{% endif %}

		{% if generic_workers_sync %}
			location ~ ^/_matrix/client/(v2_alpha|r0)/sync$ {
				{{ cors_options_response() }}
				proxy_set_header Host $host;
				{% if generic_workers_syncInitial %}
					if ($arg_since) {
						proxy_pass http://generic_worker_sync_upstream$request_uri;
					}
					proxy_pass http://generic_worker_syncInitial_upstream$request_uri;
				{% else %}
					proxy_pass http://generic_worker_sync_upstream$request_uri;
				{% endif %}
			}
		{% endif %}

		{% if generic_workers_sync or generic_workers_syncInitial %}
			location ~ ^/_matrix/client/(api/v1|r0)/initialSync$ {
				{{ cors_options_response() }}
				proxy_set_header Host $host;
				{% if generic_workers_syncInitial %}
					proxy_pass http://generic_worker_syncInitial_upstream$request_uri;
				{% else %}
					proxy_pass http://generic_worker_sync_upstream$request_uri;
				{% endif %}
			}
		{% endif %}

		{% if generic_workers_typing %}
			location ~ ^/_matrix/client/(api/v1|r0|unstable)/rooms/(?P<room_id>[^/]*)/typing/(?P<user_id>[^/]*)$ {
				{{ cors_options_response() }}
				proxy_pass http://generic_worker_typing_upstream$request_uri;
				proxy_set_header Host $host;
			}
		{% endif %}

		{% if generic_workers %}
			# https://github.com/matrix-org/synapse/blob/master/docs/workers.md#synapseappgeneric_worker
			{% if not generic_workers_login %}
				location ~ ^/_matrix/client/(api/v1|r0|unstable)/login$ {
					{{ cors_options_response() }}
					proxy_pass http://generic_worker_upstream$request_uri;
					proxy_set_header Host $host;
				}
			{% endif %}

			{% if not generic_workers_sync %}
				location ~ ^/_matrix/client/(v2_alpha|r0)/sync$ {
					{{ cors_options_response() }}
					proxy_pass http://generic_worker_upstream$request_uri;
					proxy_set_header Host $host;
				}
			{% endif %}

			{% if not generic_workers_sync and not generic_workers_syncInitial %}
				location ~ ^/_matrix/client/(api/v1|r0)/initialSync$ {
					{{ cors_options_response() }}
					proxy_pass http://generic_worker_upstream$request_uri;
					proxy_set_header Host $host;
				}
			{% endif %}

			{% for location in matrix_nginx_proxy_synapse_generic_worker_client_server_locations %}
			location ~ {{ location }} {
				{{ cors_options_response() }}
				proxy_pass http://generic_worker_upstream$request_uri;
				proxy_set_header Host $host;
			}
			{% endfor %}
		{% endif %}

		{% if media_repository_workers %}
			# https://github.com/matrix-org/synapse/blob/master/docs/workers.md#synapseappmedia_repository
			{% for location in matrix_nginx_proxy_synapse_media_repository_locations %}
			location ~ {{ location }} {
				{{ cors_options_response() }}
				proxy_pass http://media_repository_upstream$request_uri;
				proxy_set_header Host $host;

				client_body_buffer_size 25M;
				client_max_body_size {{ matrix_nginx_proxy_proxy_matrix_client_api_client_max_body_size_mb }}M;
				proxy_max_temp_file_size 0;
			}
			{% endfor %}
		{% endif %}

		{% if user_dir_workers %}
			# FIXME: obsolete if matrix_nginx_proxy_proxy_matrix_user_directory_search_enabled is set
			# https://github.com/matrix-org/synapse/blob/master/docs/workers.md#synapseappuser_dir
			{% for location in matrix_nginx_proxy_synapse_user_dir_locations %}
			location ~ {{ location }} {
				{{ cors_options_response() }}
				proxy_pass http://user_dir_upstream$request_uri;
				proxy_set_header Host $host;
			}
			{% endfor %}
		{% endif %}

		{% if frontend_proxy_workers %}
			# https://github.com/matrix-org/synapse/blob/master/docs/workers.md#synapseappfrontend_proxy
			{% for location in matrix_nginx_proxy_synapse_frontend_proxy_locations %}
			location ~ {{ location }} {
				{{ cors_options_response() }}
				proxy_pass http://frontend_proxy_upstream$request_uri;
				proxy_set_header Host $host;
			}
			{% endfor %}
			{% if matrix_nginx_proxy_synapse_presence_disabled %}
			# FIXME: keep in sync with synapse workers documentation manually
			location ~ ^/_matrix/client/(api/v1|r0|unstable)/presence/[^/]+/status {
				{{ cors_options_response() }}
				proxy_pass http://frontend_proxy_upstream$request_uri;
				proxy_set_header Host $host;
			}
			{% endif %}
		{% endif %}
		{# Workers redirects END #}
	{% endif %}


	{% for configuration_block in matrix_nginx_proxy_proxy_synapse_additional_server_configuration_blocks %}
		{{- configuration_block }}
	{% endfor %}

	{% if matrix_nginx_proxy_proxy_synapse_metrics %}
	location /_synapse/metrics {
		{% if matrix_nginx_proxy_enabled %}
			{# Use the embedded DNS resolver in Docker containers to discover the service #}
			resolver 127.0.0.11 valid=5s;
			set $backend "{{ matrix_nginx_proxy_proxy_synapse_metrics_addr_with_container }}";
			proxy_pass http://$backend;
		{% else %}
			{# Generic configuration for use outside of our container setup #}
			proxy_pass http://{{ matrix_nginx_proxy_proxy_synapse_metrics_addr_sans_container }};
		{% endif %}

		proxy_set_header Host $host;

		{% if matrix_nginx_proxy_proxy_synapse_metrics_basic_auth_enabled %}
			auth_basic "protected";
			auth_basic_user_file /nginx-data/matrix-synapse-metrics-htpasswd;
		{% endif %}
	}
	{% endif %}

	{# Everything else just goes to the API server ##}
	location / {
		{{ cors_options_response() }}
		{% if matrix_nginx_proxy_enabled %}
			{# Use the embedded DNS resolver in Docker containers to discover the service #}
			resolver 127.0.0.11 valid=5s;
			set $backend "{{ matrix_nginx_proxy_proxy_synapse_client_api_addr_with_container }}";
			proxy_pass http://$backend;
		{% else %}
			{# Generic configuration for use outside of our container setup #}
			proxy_pass http://{{ matrix_nginx_proxy_proxy_synapse_client_api_addr_sans_container }};
		{% endif %}

		proxy_set_header Host $host;

		client_body_buffer_size 25M;
		client_max_body_size {{ matrix_nginx_proxy_proxy_matrix_client_api_client_max_body_size_mb }}M;
		proxy_max_temp_file_size 0;
	}
}

{% if matrix_nginx_proxy_proxy_synapse_federation_api_enabled %}
server {
	listen 12088;

	server_name {{ matrix_nginx_proxy_proxy_synapse_hostname }};
	server_tokens off;

	root /dev/null;

	gzip on;
	gzip_types text/plain application/json;

	{% if matrix_nginx_proxy_synapse_workers_enabled %}
		{% if generic_workers %}
			# https://github.com/matrix-org/synapse/blob/master/docs/workers.md#synapseappgeneric_worker
			{% for location in matrix_nginx_proxy_synapse_generic_worker_federation_locations %}
			location ~ {{ location }} {
				proxy_pass http://generic_worker_upstream$request_uri;
				proxy_set_header Host $host;
			}
			{% endfor %}
		{% endif %}
		{% if media_repository_workers %}
			# https://github.com/matrix-org/synapse/blob/master/docs/workers.md#synapseappmedia_repository
			{% for location in matrix_nginx_proxy_synapse_media_repository_locations %}
			location ~ {{ location }} {
				proxy_pass http://media_repository_upstream$request_uri;
				proxy_set_header Host $host;

				client_body_buffer_size 25M;
				client_max_body_size {{ matrix_nginx_proxy_proxy_matrix_federation_api_client_max_body_size_mb }}M;
				proxy_max_temp_file_size 0;
			}
			{% endfor %}
		{% endif %}
	{% endif %}

	location / {
		{% if matrix_nginx_proxy_enabled %}
			{# Use the embedded DNS resolver in Docker containers to discover the service #}
			resolver 127.0.0.11 valid=5s;
			set $backend "{{ matrix_nginx_proxy_proxy_synapse_federation_api_addr_with_container }}";
			proxy_pass http://$backend;
		{% else %}
			{# Generic configuration for use outside of our container setup #}
			proxy_pass http://{{ matrix_nginx_proxy_proxy_synapse_federation_api_addr_sans_container }};
		{% endif %}

		proxy_set_header Host $host;

		client_body_buffer_size 25M;
		client_max_body_size {{ matrix_nginx_proxy_proxy_matrix_federation_api_client_max_body_size_mb }}M;
		proxy_max_temp_file_size 0;
	}
}
{% endif %}
